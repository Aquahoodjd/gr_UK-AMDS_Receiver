options:
  parameters:
    author: henningM1r
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: UK_AMDS_Receiver
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: UK-AMDS Receiver
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: decimation
  id: variable
  parameters:
    comment: ''
    value: '24'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 12.0]
    rotation: 0
    state: true
- name: freq_UKAMDS
  id: variable
  parameters:
    comment: ''
    value: '198000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 12.0]
    rotation: 0
    state: true
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Recv. Gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '500'
    step: '10'
    stop: '1000'
    value: '750'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 12.0]
    rotation: 0
    state: true
- name: pll_bw
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: PLL Bandwidth
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.01'
    step: '0.01'
    stop: '10'
    value: '2.0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 156.0]
    rotation: 0
    state: enabled
- name: pll_limit
  id: variable
  parameters:
    comment: ''
    value: '0.7853981633974483'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 92.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '192000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: variable_low_pass_filter_taps
  id: variable_low_pass_filter_taps
  parameters:
    beta: '6.76'
    comment: 'a fairly dense bandwidth

      is required here'
    cutoff_freq: '150'
    gain: '1'
    samp_rate: samp_rate
    width: '60'
    win: window.WIN_BLACKMAN
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 372.0]
    rotation: 0
    state: enabled
- name: analog_pll_carriertracking_cc_0
  id: analog_pll_carriertracking_cc
  parameters:
    affinity: ''
    alias: ''
    comment: phase drift compensation
    max_freq: 2*math.pi*pll_limit/samp_rate
    maxoutbuf: '0'
    min_freq: -2*math.pi*pll_limit/samp_rate
    minoutbuf: '0'
    w: 2*math.pi*pll_bw/samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 284.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 756.0]
    rotation: 0
    state: true
- name: blocks_complex_to_arg_0_0
  id: blocks_complex_to_arg
  parameters:
    affinity: ''
    alias: ''
    comment: 'to obtain the

      phase of the

      complex signal'
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 728.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 200.0]
    rotation: 0
    state: true
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 968.0]
    rotation: 0
    state: disabled
- name: blocks_message_debug_0_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1592, 968.0]
    rotation: 0
    state: disabled
- name: blocks_message_debug_0_0_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1840, 968.0]
    rotation: 0
    state: enabled
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: slight signal smoothing
    length: '50'
    max_iter: '150'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/25
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 700.0]
    rotation: 0
    state: enabled
- name: blocks_moving_average_xx_1
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '1000000'
    max_iter: '1200000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/1000000
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 172.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: gain
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 284.0]
    rotation: 0
    state: enabled
- name: digital_binary_slicer_fb_0
  id: digital_binary_slicer_fb
  parameters:
    affinity: ''
    alias: ''
    comment: 'mapping from

      -/+1 to 0/1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 760.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\nfrom gnuradio import gr\nimport pmt\nimport numpy as np\n\n\n\
      # track the seconds\n_count = 0\n\n_count_zeros = 0\n_count_ones = 0\n\n# single\
      \ value history\n_msg_history = None\n\nclass blk(gr.sync_block):\n\n    def\
      \ __init__(self):\n        gr.sync_block.__init__(\n            self,\n    \
      \        name='Manchester-\\nDecoder',\n            in_sig=None,\n         \
      \   out_sig=None\n        )\n\n        self.message_port_register_out(pmt.intern('msg_out'))\n\
      \        self.message_port_register_in(pmt.intern('msg_in'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n\n        self.queue_len = 25\n        self.queue = gr.msg_queue(self.queue_len)\n\
      \n    def prepare_window(self, msg):\n        # message contains a whole sequence\
      \ of a received second\n        # but not synchronized to the frames yet\n \
      \       msg = pmt.to_python(msg)\n\n        # first put each string into an\
      \ array (separated by comma)\n        received_msg = msg.split(\",\")\n\n  \
      \      # truncate last element (\"\") from list\n        received_msg = received_msg[:-1]\n\
      \n        # convert to numpy-array\n        np_recv_seq = np.array(received_msg)\n\
      \n        # turn each array element into an integer value\n        np_recv_seq\
      \ = np.asarray(np_recv_seq, dtype=np.int32)\n\n        return np_recv_seq\n\n\
      \    def convertFromManchester(self, inp):\n        global _msg_history\n\n\
      \        i = 1\n        while i <= len(inp):\n            if i == len(inp):\n\
      \                # memorize last symbol for next block\n                _msg_history\
      \ = inp[i-1]\n                return\n\n            if inp[i-1] == 0 and inp[i]\
      \ == 1:\n                self.send_msg(val=\"0,\")\n                i += 2\n\
      \                \n            elif inp[i-1] == 1 and inp[i] == 0:\n       \
      \         self.send_msg(val=\"1,\")\n                i += 2\n\n            else:\
      \ # error - no Manchester code symbol\n                if i != 0:\n        \
      \            # 00 or 11 received\n                    self.send_msg(val=\"2,\"\
      )\n                i += 1\n\n    def send_msg(self, val):\n        # convert\
      \ python string to message\n        msg1_in = gr.message_from_string(val)\n\n\
      \        # insert message into queue\n        self.queue.insert_tail(msg1_in)\n\
      \n        msg_list = [0] * self.queue_len\n\n        # send a combination of\
      \ all messages contained in queue\n        if self.queue.full_p():\n       \
      \     for idx in range(0, self.queue_len):\n                msg_list[idx] =\
      \ self.queue.delete_head().\\\n                                     to_string().decode(\"\
      utf-8\")\n\n            msg1_out = \"\".join(map(str, msg_list))\n         \
      \   self.message_port_pub(pmt.intern(\"msg_out\"),\n                       \
      \           pmt.intern(msg1_out))\n\n    def handle_msg(self, msg):\n      \
      \  global _msg_history\n\n        window = self.prepare_window(msg)\n\n    \
      \    # append non-empty single-item history\n        if _msg_history != None:\n\
      \            #print(\"insert history at front: \", _msg_history)\n         \
      \   window = np.insert(arr=window, obj = 0, values=_msg_history, axis=0)\n \
      \           _msg_history = None\n            #print(\"cleared history\")\n\n\
      \        self.convertFromManchester(window)\n\n"
    affinity: ''
    alias: Manchester_Decoder
    comment: 'convert incoming bits:

      according to

      Manchester decoding

      01 => 0

      10 => 1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Manchester-\nDecoder', 'blk', [], [('msg_in', 'message', 1)], [('msg_out',
      'message', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 836.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\nimport numpy as np\nfrom gnuradio import gr\nimport pmt\n\n\n\
      # counted number of one samples for +1\n_num_ones = 0\n# counted number of one\
      \ samples for -1\n_num_zeros = 0\n\nclass blk(gr.sync_block):\n\n    def __init__(self,\
      \ sample_rate=24750):\n\n        gr.sync_block.__init__(\n            self,\n\
      \            name='UK-AMDS\\nSymbol Detector',\n            in_sig=[np.float32],\n\
      \            out_sig=[np.float32]\n        )\n\n        self.message_port_register_out(pmt.intern('msg_out'))\n\
      \n        self.sample_rate = sample_rate\n\n        # each subframe lasts approx.\
      \ 20ms\n        self._subframe = int(0.02 * self.sample_rate)\n\n        print(\"\
      subframe: \", self._subframe)\n\n        self.queue_len = 25\n        self.queue\
      \ = gr.msg_queue(self.queue_len)\n\n    def work(self, input_items, output_items):\n\
      \        inp = input_items[0]\n\n        output_items[0][:] = self.extract_bits(inp)\n\
      \n        # transmit tagged stream\n        return len(output_items[0])\n\n\
      \    def clear_counters(self):\n        global _num_ones\n        global _num_zeros\n\
      \n        _num_ones = 0\n        _num_zeros = 0\n\n    def send_msg(self, val,\
      \ num):\n        # handles both the message ouput queue\n        # and the message\
      \ transmission\n        _msg = \"\"\n\n        if num > 0:\n            for\
      \ i in range(0, num):\n                _msg += val\n\n            # convert\
      \ python string to message\n            msg1_in = gr.message_from_string(_msg)\n\
      \n            # insert message into queue\n            self.queue.insert_tail(msg1_in)\n\
      \n        msg_list = [0]*self.queue_len\n\n        # send a combination of all\
      \ messages contained in queue\n        if self.queue.full_p():\n           \
      \ for idx in range(0, self.queue_len):\n                msg_list[idx] = self.queue.delete_head().\\\
      \n                                     to_string().decode(\"utf-8\")\n\n   \
      \         msg1_out = \"\".join(map(str, msg_list))\n            self.message_port_pub(pmt.intern(\"\
      msg_out\"),\n                                  pmt.intern(msg1_out))\n\n   \
      \ def extract_bits(self, inp):\n        global _num_ones\n        global _num_zeros\n\
      \n        out = np.zeros(len(inp))\n\n        # iterate through all five (parallel)\
      \ input streams concurrently\n        for idx in range(len(inp)):\n        \
      \    # get symbol value at index for input stream\n            ch = inp[idx]\n\
      \n            # increment current counters of ones per\n            # input\
      \ stream, correspondingly\n            if ch == 1:\n                _num_ones\
      \ += 1\n\n            if ch == 0:\n                _num_zeros += 1\n\n     \
      \       # changes from 1 to 0\n            if (ch == 0 and\n               \
      \     _num_ones >= int(self._subframe*0.66)):\n\n                _num = round(_num_ones/self._subframe)\n\
      \n                key = pmt.intern(\"\")\n                value = pmt.intern(f\"\
      1,{_num}\")\n                self.add_item_tag(0,\n                        \
      \          self.nitems_written(0) + idx,\n                                 \
      \ key,\n                                  value)\n\n                out[idx]\
      \ = 0.25\n                self.send_msg(val=\"1,\", num=_num)\n\n          \
      \      self.clear_counters()\n\n            # changes from 0 to 1\n        \
      \    if (ch == 1 and\n                    _num_zeros >= int(self._subframe*0.66)):\n\
      \n                _num = round(_num_zeros/self._subframe)\n\n              \
      \  key = pmt.intern(\"\")\n                value = pmt.intern(f\"0,{_num}\"\
      )\n                self.add_item_tag(0,\n                                  self.nitems_written(0)\
      \ + idx,\n                                  key,\n                         \
      \         value)\n\n                out[idx] = -0.25\n                self.send_msg(val=\"\
      0,\", num=_num)\n\n                self.clear_counters()\n\n        return out\n"
    affinity: ''
    alias: UK_AMDS_Symbol_Detector
    comment: 'detects symbols

      with the values 1/0

      and provides

      corresponding

      messages, respectively.'
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: int(samp_rate/decimation)
  states:
    _io_cache: ('UK-AMDS\nSymbol Detector', 'blk', [('sample_rate', '24750')], [('0',
      'float', 1)], [('0', 'float', 1), ('msg_out', 'message', 1)], '', ['sample_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 792.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\nimport numpy as np\nfrom gnuradio import gr\nimport pmt\nfrom\
      \ scipy.spatial.distance import hamming\n\n\n# sliding window for selected messages\n\
      _msg_window = np.empty(shape=(1, 1))\n\nclass blk(gr.sync_block):\n\n    def\
      \ __init__(self):\n        gr.sync_block.__init__(\n            self,\n    \
      \        name='UK-AMDS\\nCorrelator',\n            in_sig=None,\n          \
      \  out_sig=None,\n        )\n\n        self.message_port_register_out(pmt.intern('msg_out'))\n\
      \        self.message_port_register_in(pmt.intern('msg_in'))\n        self.set_msg_handler(pmt.intern('msg_in'),\
      \ self.handle_msg)\n\n        # codes and headers\n        self.filler_code\
      \ = [1,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,\n                            1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,\n\
      \                            0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1]\n\n        self.time_code_header\
      \ = [1,0,0,0,0,0]\n\n        self.other_app_header1 = [1,0,1,0,1,1]\n      \
      \  self.other_app_header2 = [1,0,1,0,1,0]\n        self.other_app_header3 =\
      \ [1,1,1,1,0,1]\n\n        self.symbol_thres = 0\n\n    def prepare_window(self,\
      \ msg):\n        global _msg_window\n\n        # message contains the whole\
      \ sequence of a received second\n        msg = pmt.to_python(msg)\n\n      \
      \  # first put each string into an array (separated by comma)\n        received_msg\
      \ = msg.split(\",\")\n\n        # truncate last element (\"\") from list\n \
      \       received_msg = received_msg[:-1]\n\n        # convert to numpy-array\n\
      \        np_recv_seq = np.array(received_msg)\n\n        # turn each array element\
      \ into an integer value\n        np_recv_seq = np.asarray(np_recv_seq, dtype=np.int32)\n\
      \n        _msg_window = np.append(_msg_window, np_recv_seq)\n\n    def compare_code(self,\
      \ window, code, cw_len):\n        min_dist = cw_len\n        idx = 0\n     \
      \   found = False\n\n        # decision metric: compare window with codeword\n\
      \        # using the Hamming metric\n        for offset in range(0, max(1, len(window)\
      \ - cw_len + 1)):\n            dist = hamming(window[offset:offset + cw_len],\
      \ code)\n\n            # update current minimum\n            if min_dist > dist:\n\
      \                min_dist = dist\n\n            # check decision threshold for\
      \ minimum\n            if min_dist <= self.symbol_thres:\n                idx\
      \ = offset\n                break\n\n        if min_dist <= self.symbol_thres:\n\
      \            # this is indeed a filler-code\n            found = True\n\n  \
      \      if min_dist > self.symbol_thres:\n            # this is not a filler-code\n\
      \            found = False\n\n        return [found, idx]\n\n    def handle_msg(self,\
      \ msg):\n        global _msg_window\n\n        # find beginning of block\n \
      \       # send full block out to decoder\n        # 2 indicates loss\n\n   \
      \     self.prepare_window(msg)\n\n        found = False\n\n        if len(_msg_window)\
      \ >= 75:\n            cur_window = _msg_window.copy()\n\n            # find\
      \ position-codeword in _msg_window\n            [filler_found, idx] = \\\n \
      \               self.compare_code(\n                window=_msg_window.copy(),\n\
      \                code=self.filler_code,\n                cw_len=50)\n\n    \
      \        if filler_found == True:\n                filler_code = _msg_window[idx:idx+50]\n\
      \                #print(f\"Window: {cur_window.astype(int)}\")\n           \
      \     print(f\"filler-code found at {idx}\")\n\n                # send message\n\
      \                msg1_out = np.array2string(filler_code.astype(int), separator=',')\n\
      \                self.message_port_pub(pmt.intern(\"msg_out\"),\n          \
      \                            pmt.intern(msg1_out))\n\n                # truncate\
      \ decoded filler window\n                _msg_window = _msg_window[idx+50:]\n\
      \n                return\n\n            window_header = list(_msg_window[0:6].astype(int))\n\
      \n            if window_header == self.time_code_header:\n                time_code\
      \ = _msg_window[idx:idx+50]\n                #print(f\"Window: {cur_window.astype(int)}\"\
      )\n                print(f\"time-header at 0: {self.time_code_header}\")\n \
      \               #print(f\"full time-code: {time_code.astype(int)}\")\n\n   \
      \             # send message\n                msg1_out = np.array2string(time_code.astype(int),\
      \ separator=',')\n                self.message_port_pub(pmt.intern(\"msg_out\"\
      ),\n                                      pmt.intern(msg1_out))\n\n        \
      \        # truncate window\n                _msg_window = _msg_window[50:]\n\
      \n                return\n\n            if (window_header == self.other_app_header1\
      \ or\n                    window_header == self.other_app_header2 or\n     \
      \               window_header == self.other_app_header3):\n                other_code\
      \ = _msg_window[idx:idx+50]\n                #print(f\"Window: {cur_window.astype(int)}\"\
      )\n                print(f\"Detected other application code at 0.\")\n     \
      \           print(f\"header code: {window_header}\")\n\n                # send\
      \ message\n                msg1_out = np.array2string(other_code.astype(int),\
      \ separator=',')\n                self.message_port_pub(pmt.intern(\"msg_out\"\
      ),\n                                      pmt.intern(msg1_out))\n          \
      \      # truncate window\n                _msg_window = _msg_window[50:]\n\n\
      \                return\n\n            else:\n                #print(f\"Window:\
      \ {cur_window.astype(int)}\")\n                print(\"Codeword unknown - out\
      \ of sync\")\n\n                # truncate part of window\n                _msg_window\
      \ = _msg_window[24:]\n\n\n"
    affinity: ''
    alias: UK_AMDS_Correlator
    comment: 'detect filler_code

      detect time_code_header'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('UK-AMDS\nCorrelator', 'blk', [], [('msg_in', 'message', 1)], [('msg_out',
      'message', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1600, 836.0]
    rotation: 0
    state: enabled
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: '0'
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: variable_low_pass_filter_taps
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 276.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 12.0]
    rotation: 0
    state: true
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: 'public specification of UK-AMDS

      * UK-AMDS signals

      * time code

      * filler code

      https://www.sigidwiki.com/images/2/29/1984-19.pdf'
    note: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 12.0]
    rotation: 0
    state: true
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: airspyhf=0
    bb_gain0: '0'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '4000'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: 'frame is localized on the

      center frequency of the

      UK-AMDS signal'
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '2'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: freq_UKAMDS
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '30'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '30'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: none
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 188.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (1,0)
    label1: Phase Signal
    label10: Signal 10
    label2: Binary Levels
    label3: TIme-Sliced Levels
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '3'
    size: int(samp_rate/decimation)
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.025'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.25'
    ymin: '-0.5'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 728.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (2,0)
    label1: Recv. Power
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.025'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.5'
    ymin: '-0.25'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 180.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_1
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: 'to reduces receiver

      complexity'
    decim: decimation
    fbw: '0'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 276.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 300.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 724.0]
    rotation: 0
    state: true
- name: zeromq_push_msg_sink_0
  id: zeromq_push_msg_sink
  parameters:
    address: tcp://127.0.0.1:55555
    affinity: ''
    alias: ''
    bind: 'True'
    comment: to UK-AMDS decoder
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1808, 828.0]
    rotation: 0
    state: enabled

connections:
- [analog_pll_carriertracking_cc_0, '0', virtual_sink_0, '0']
- [blocks_char_to_float_0, '0', epy_block_0_0, '0']
- [blocks_char_to_float_0, '0', qtgui_time_sink_x_0, '1']
- [blocks_complex_to_arg_0_0, '0', digital_binary_slicer_fb_0, '0']
- [blocks_complex_to_arg_0_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_moving_average_xx_1, '0']
- [blocks_moving_average_xx_0, '0', blocks_complex_to_arg_0_0, '0']
- [blocks_moving_average_xx_1, '0', qtgui_time_sink_x_1, '0']
- [blocks_multiply_const_vxx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [blocks_multiply_const_vxx_0, '0', freq_xlating_fir_filter_xxx_0, '0']
- [digital_binary_slicer_fb_0, '0', blocks_char_to_float_0, '0']
- [epy_block_0, msg_out, blocks_message_debug_0_0, print]
- [epy_block_0, msg_out, epy_block_1, msg_in]
- [epy_block_0_0, '0', qtgui_time_sink_x_0, '2']
- [epy_block_0_0, msg_out, blocks_message_debug_0, print]
- [epy_block_0_0, msg_out, epy_block_0, msg_in]
- [epy_block_1, msg_out, blocks_message_debug_0_0_0, print]
- [epy_block_1, msg_out, zeromq_push_msg_sink_0, in]
- [freq_xlating_fir_filter_xxx_0, '0', rational_resampler_xxx_1, '0']
- [osmosdr_source_0, '0', blocks_multiply_const_vxx_0, '0']
- [rational_resampler_xxx_1, '0', analog_pll_carriertracking_cc_0, '0']
- [virtual_source_0, '0', blocks_moving_average_xx_0, '0']

metadata:
  file_format: 1
